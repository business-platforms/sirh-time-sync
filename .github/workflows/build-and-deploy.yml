name: Build and Deploy Time Attendance System

on:
  push:
#    paths:
#      - 'version.txt'
    branches:
      - master

env:
  # Non-sensitive configuration variables
  SERVER_HOST: "157.173.97.199"
  SERVER_USER: "root"
  SERVER_PATH: "/root/sirh/time-sync/downloads"
  UPDATE_SERVER_URL: "http://timesync-dev.rh-partner.com"

jobs:
  build-and-deploy:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read version from file
        id: version
        run: |
          $version = Get-Content version.txt -Raw
          $version = $version.Trim()
          echo "VERSION=$version" >> $env:GITHUB_ENV
          echo "INSTALLER_NAME=timesync-setup-$version.exe" >> $env:GITHUB_ENV
          echo "LOCAL_INSTALLER_PATH=installer/timesync-setup-$version.exe" >> $env:GITHUB_ENV
          echo "📋 Version: $version"
          echo "📦 Installer: timesync-setup-$version.exe"
        shell: pwsh

      # === SSH SETUP FIRST ===
      - name: Setup SSH key
        run: |
          echo "🔑 Setting up SSH key..."
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ env.SERVER_HOST }} >> ~/.ssh/known_hosts
          echo "✅ SSH key configured"
        shell: bash

      - name: Check existing version on server
        run: |
          echo "🔍 Checking if version ${{ env.VERSION }} already exists on server..."
          
          # Use SSH to check if file exists
          $checkResult = ssh -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "if [ -f ${{ env.SERVER_PATH }}/${{ env.INSTALLER_NAME }} ]; then echo 'EXISTS'; else echo 'NOT_EXISTS'; fi"
          
          if ($checkResult -eq "EXISTS") {
            echo "❌ Version ${{ env.VERSION }} already exists on server."
            echo "To overwrite, delete the existing file first or use a different version."
            exit 1
          } else {
            echo "✅ Version ${{ env.VERSION }} does not exist. Proceeding with build."
          }
        shell: pwsh

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build installer
        run: |
          echo "🔨 Building installer for version ${{ env.VERSION }}..."
          python ci_build.py --version ${{ env.VERSION }}

      - name: Verify build output
        run: |
          echo "✅ Checking build output..."
          if (Test-Path "${{ env.LOCAL_INSTALLER_PATH }}") {
            $fileSize = (Get-Item "${{ env.LOCAL_INSTALLER_PATH }}").Length
            $fileSizeMB = [math]::Round($fileSize / 1MB, 2)
            echo "✅ Installer created: ${{ env.INSTALLER_NAME }} ($fileSizeMB MB)"
            echo "BUILD_SUCCESS=true" >> $env:GITHUB_ENV
          } else {
            echo "❌ Installer not found at: ${{ env.LOCAL_INSTALLER_PATH }}"
            exit 1
          }
        shell: pwsh

      # === DEPLOYMENT SECTION ===
      - name: Deploy installer to server
        run: |
          echo "🚀 Deploying ${{ env.INSTALLER_NAME }} to server..."
          
          # Copy file to server using SCP
          scp -i ~/.ssh/deploy_key "${{ env.LOCAL_INSTALLER_PATH }}" ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:${{ env.SERVER_PATH }}/
          
          if ($LASTEXITCODE -eq 0) {
            echo "✅ File uploaded successfully"
          } else {
            echo "❌ Upload failed"
            exit 1
          }
        shell: pwsh

      - name: Set file permissions on server
        run: |
          echo "🔒 Setting file permissions..."
          
          # Set proper permissions
          ssh -i ~/.ssh/deploy_key ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "chmod 644 ${{ env.SERVER_PATH }}/${{ env.INSTALLER_NAME }}"
          
          # Verify file was uploaded correctly
          $remoteSize = ssh -i ~/.ssh/deploy_key ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "stat -c%s ${{ env.SERVER_PATH }}/${{ env.INSTALLER_NAME }}"
          
          echo "✅ Deployment successful: ${{ env.INSTALLER_NAME }} uploaded ($remoteSize bytes)"
        shell: pwsh

      # DIRECT VERSION FILE UPDATE
      - name: Update version file on server
        run: |
          echo "📝 Updating versions.json file on server..."
          
          # Read current versions.json from server
          echo "🔍 Reading current versions.json..."
          $currentVersions = ssh -i ~/.ssh/deploy_key ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "cat /root/sirh/time-sync/app-data/versions.json"
          echo "Current versions.json content: $currentVersions"
          
          # Create updated versions.json content
          $newVersionData = @{
            latest = @{
              version = "${{ env.VERSION }}"
              notes = "Automated release from GitHub Actions - $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
            }
            versions = @{
              "${{ env.VERSION }}" = @{
                notes = "Automated release from GitHub Actions"
                releaseDate = "$(Get-Date -Format 'yyyy-MM-ddTHH:mm:ssZ')"
              }
            }
          }
          
          # Convert to JSON
          $jsonContent = $newVersionData | ConvertTo-Json -Depth 3 -Compress
          echo "📝 New JSON content: $jsonContent"
          
          # Write updated versions.json to server
          ssh -i ~/.ssh/deploy_key ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "echo '$jsonContent' > /root/sirh/time-sync/app-data/versions.json"
          
          # Verify the update
          echo "✅ Verifying update..."
          $updatedContent = ssh -i ~/.ssh/deploy_key ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "cat /root/sirh/time-sync/app-data/versions.json"
          echo "Updated versions.json: $updatedContent"
          
          echo "✅ Version ${{ env.VERSION }} registered successfully in versions.json"
        shell: pwsh

      - name: Cleanup SSH key
        if: always()
        run: |
          rm -f ~/.ssh/deploy_key
        shell: bash

      - name: Upload build artifacts (backup)
        if: env.BUILD_SUCCESS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: timesync-installer-${{ env.VERSION }}
          path: installer/*.exe
          retention-days: 30

      - name: Deployment summary
        if: success()
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "📦 Version: ${{ env.VERSION }}"
          echo "📁 Installer: ${{ env.INSTALLER_NAME }}"
          echo "🔗 Download URL: ${{ env.UPDATE_SERVER_URL }}/api/updates/download"
          echo "📋 Version file updated: /root/sirh/time-sync/app-data/versions.json"
        shell: pwsh